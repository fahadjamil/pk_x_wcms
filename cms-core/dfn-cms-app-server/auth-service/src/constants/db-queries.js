const dbQueries = {
    // Auth Service
    selectUserByEmail: 'SELECT * FROM S01_USERS WHERE S01_EMAIL = @email',
    selectUserById: 'SELECT * FROM S01_USERS WHERE S01_ID = @userId',
    selectLoginsByLoginName: 'SELECT * FROM S02_USER_LOGINS WHERE S02_LOGINNAME = @email',
    selectLoginsByActivationCode:
        'SELECT * FROM S02_USER_LOGINS WHERE S02_PUBLIC_KEY = @activationCode',
    createUser:
        'INSERT INTO S01_USERS (S01_FIRSTNAME, S01_EMAIL, S01_TIMESTAMP) VALUES (@name, @email, CURRENT_TIMESTAMP)',
    selectWindowTypes: 'SELECT * FROM M29_WINDOW_TYPES',
    // createLogin: 'INSERT INTO S02_USER_LOGINS (S02_USER_ID, S02_LOGINNAME, S02_PASSWORD, S02_TYPE_BIT, S02_START_DATE ,S02_EXPIRY_DATE, S02_LAST_UPDATED ) VALUES (@userId, @email, @password, 1, GETDATE() ,DATEADD(year, 1, GETDATE()) ,GETDATE())',
    createLogin:
        'INSERT INTO S02_USER_LOGINS (S02_USER_ID, S02_LOGINNAME, S02_PASSWORD, S02_WINDOWTYPES, S02_EXCHANGE_PARA, S02_PUBLIC_KEY, S02_TYPE_BIT, S02_START_DATE, S02_EXPIRY_DATE, S02_LAST_UPDATED ) VALUES (@userId, @email, @password, @windowTypes, @exchangePara, @activationCode, @activationStatus, GETDATE() ,DATEADD(year, 50, GETDATE()) ,GETDATE())',
    activateLogin:
        'UPDATE S02_USER_LOGINS SET S02_TYPE_BIT = @activationStatus WHERE S02_LOGIN_ID = @loginId',
    deleteUserByUserId: 'DELETE FROM S01_USERS WHERE S01_ID = @userId',
    updateLoginPasswordByOldPword:
        'UPDATE S02_USER_LOGINS SET S02_PASSWORD = @newPassword, S02_RESET = 0, S02_LAST_UPDATED = GETDATE() WHERE S02_LOGINNAME = @userName AND S02_PASSWORD = @oldPassword',
    updateLoginOTP: 'UPDATE S02_USER_LOGINS SET S02_OTP = @otp WHERE S02_LOGINNAME = @email',
    updateLoginPasswordByOTP:
        'UPDATE S02_USER_LOGINS SET S02_PASSWORD = @newPassword, S02_LAST_UPDATED = GETDATE() WHERE S02_LOGINNAME = @email AND S02_OTP = @otp',
    createUserSession:
        'INSERT INTO S15_USR_SESSIONS (S15_USER_ID, S15_LOGIN_ID, S15_SESSION_ID, S15_LOGINNAME, S15_LOGIN_TIME, S15_USERTYPE, S15_ISVALID, S15_KILLABLE, S15_PRODUCT_ID) VALUES (@userId, @loginId, @sessionId, @loginName, GETDATE(), 1, 1, 0, @prodId)',
    selectUserActiveSessions:
        'SELECT * FROM S15_USR_SESSIONS WHERE S15_LOGINNAME = @loginName AND S15_PRODUCT_ID = @prodId AND S15_ISVALID = 1',
    selectUserActiveOldSessions:
        'SELECT * FROM S15_USR_SESSIONS WHERE S15_LOGINNAME = @loginName AND S15_PRODUCT_ID = @prodId AND S15_ISVALID = 1 AND S15_SESSION_ID != @sessionId',
    invalidateUserSessions:
        'UPDATE S15_USR_SESSIONS SET S15_ISVALID = 0, S15_LOGOUT_TIME = GETDATE() WHERE S15_LOGINNAME = @loginName AND S15_PRODUCT_ID = @prodId AND S15_ISVALID = 1',
    invalidateUserOldSessions:
        'UPDATE S15_USR_SESSIONS SET S15_ISVALID = 0, S15_LOGOUT_TIME = GETDATE() WHERE S15_LOGINNAME = @loginName AND S15_PRODUCT_ID = @prodId AND S15_ISVALID = 1 AND S15_SESSION_ID != @sessionId',
    insertKillableSession:
        'INSERT INTO S15_USR_SESSIONS_KILLABLE (S15_USER_ID, S15_LOGIN_ID, S15_SESSION_ID, S15_LOGINNAME, S15_LOGIN_TIME, S15_LOGOUT_TIME, S15_USERTYPE) VALUES (@userId, @loginId, @sessionId, @loginName, @loginTime, GETDATE(), @userType)',
    updateFailedAttempts:
        'UPDATE S02_USER_LOGINS SET S02_FAILED_ATTEMPTS = S02_FAILED_ATTEMPTS + 1 WHERE S02_LOGINNAME = @email',
    clearFailedAttempts:
        'UPDATE S02_USER_LOGINS SET S02_FAILED_ATTEMPTS = 0 WHERE S02_LOGINNAME = @email',

    // User Management Service
    userDetailsByEmail:
        "SELECT S02_LOGINNAME, S02_TYPE_BIT, S02_PUBLIC_KEY, S02_FAILED_ATTEMPTS, S02_OTP, S02_START_DATE, S02_LAST_UPDATED, S02_LOGIN_ID, S02_USER_ID, S01_USERS.S01_FIRSTNAME FROM S02_USER_LOGINS LEFT JOIN S01_USERS ON S02_USER_LOGINS.S02_USER_ID = S01_USERS.S01_ID WHERE S02_LOGINNAME LIKE '%@email%'",

    userDetailsByName:
        "SELECT S02_LOGINNAME, S02_TYPE_BIT, S02_PUBLIC_KEY, S02_FAILED_ATTEMPTS, S02_OTP, S02_START_DATE, S02_LAST_UPDATED, S02_LOGIN_ID, S02_USER_ID, S01_USERS.S01_FIRSTNAME FROM S02_USER_LOGINS LEFT JOIN S01_USERS ON S02_USER_LOGINS.S02_USER_ID = S01_USERS.S01_ID WHERE S01_FIRSTNAME LIKE '%@name%'",

    userDetailsByStatus:
        'SELECT S02_LOGINNAME, S02_TYPE_BIT, S02_PUBLIC_KEY, S02_FAILED_ATTEMPTS, S02_OTP, S02_START_DATE, S02_LAST_UPDATED, S02_LOGIN_ID, S02_USER_ID, S01_USERS.S01_FIRSTNAME FROM S02_USER_LOGINS LEFT JOIN S01_USERS ON S02_USER_LOGINS.S02_USER_ID = S01_USERS.S01_ID WHERE S02_TYPE_BIT IN (@status)',

    userDetailsByRegDate:
        'SELECT S02_LOGINNAME, S02_TYPE_BIT, S02_PUBLIC_KEY, S02_FAILED_ATTEMPTS, S02_OTP, S02_START_DATE, S02_LAST_UPDATED, S02_LOGIN_ID, S02_USER_ID, S01_USERS.S01_FIRSTNAME FROM S02_USER_LOGINS LEFT JOIN S01_USERS ON S02_USER_LOGINS.S02_USER_ID = S01_USERS.S01_ID WHERE CAST(S02_START_DATE AS DATE) BETWEEN @fromDate AND @toDate',

    // Product Subscription Service
    selectProducts: 'SELECT * FROM PRODUCTS WHERE STATUS = 1',
    selectGroups: 'SELECT * FROM PRODUCT_GROUPS ORDER BY GROUP_ID ASC;',
    selectSubGroups: 'SELECT * FROM PRODUCT_SUB_GROUPS ORDER BY SUB_GROUP_ID ASC;',
    selectPeriods: 'SELECT * FROM PRODUCT_SUBSCRIPTION_PERIODS ORDER BY PERIOD_ID ASC;',
    selectFees: 'SELECT * FROM PRODUCT_FEE',
    selectUserSubscriptions: 'SELECT * FROM PRODUCT_SUBSCRIPTIONS WHERE USER_LOGIN_ID = @loginId',
    selectUserActiveSubscriptions:
        'SELECT * FROM PRODUCT_SUBSCRIPTIONS WHERE USER_LOGIN_ID = @loginId AND STATUS IN (1,2)',
    addSubscription:
        'INSERT INTO PRODUCT_SUBSCRIPTIONS (USER_LOGIN_ID, PRODUCT_ID, PERIOD_ID, STATUS, SUBSCRIBED_DATE, EXPIRY_DATE, TRANSACTION_CODE) VALUES (@login, @product, @period, @status, @subscribeDate, @expiryDate, @transCode)',
    renewSubscription:
        'UPDATE PRODUCT_SUBSCRIPTIONS SET STATUS = @renewStatus, NEW_PERIOD_ID = @renewPeriod, NEW_EXPIRY_DATE = @renewExpiryDate, TRANSACTION_CODE = @transCode WHERE USER_LOGIN_ID = @login AND PRODUCT_ID = @product',
    // TODO: Remove temp query
    renewSubscriptionTemp:
        'UPDATE PRODUCT_SUBSCRIPTIONS SET STATUS = @renewStatus, PERIOD_ID = @renewPeriod, EXPIRY_DATE = @renewExpiryDate, TRANSACTION_CODE = @transCode WHERE USER_LOGIN_ID = @login AND PRODUCT_ID = @product',
    unsubscribe:
        'UPDATE PRODUCT_SUBSCRIPTIONS SET STATUS = @unsubStatus, UNSUBSCRIBED_DATE = @unsubDate WHERE USER_LOGIN_ID = @login AND PRODUCT_ID = @product',
    subscriptionAudit:
        'INSERT INTO PRODUCT_SUBSCRIPTION_AUDIT (USER_LOGIN_ID, PRODUCT_ID, PERIOD_ID, FROM_DATE, TO_DATE, SUBS_STATUS_ID, SUBS_STATUS, ACTION, AUDIT_DATE_TIME, TRANSACTION_CODE) VALUES (@loginId, @productId, @periodId, @fromDate, @toDate, @statusId, @status, @action, GETDATE(), @transCode)', // SUBSCRIPTION_ID, USER_LOGIN
    unsubscribeAudit:
        'INSERT INTO PRODUCT_SUBSCRIPTION_AUDIT (USER_LOGIN_ID, PRODUCT_ID, FROM_DATE, SUBS_STATUS_ID, SUBS_STATUS, ACTION, AUDIT_DATE_TIME) VALUES (@loginId, @productId, @fromDate, @statusId, @status, @action, GETDATE())', // SUBSCRIPTION_ID, USER_LOGIN
    addPurchaseTransaction:
        'INSERT INTO PURCHASE_TRANSACTIONS (TRACK_ID, LOGIN_ID, AMOUNT, CREATED_DATE, STATUS, STATUS_DESCRIPTION) VALUES (@trackId, @login, @amount, @createdDate, @status, @statusDescription)',
    updatePurchaseResponse:
        'UPDATE PURCHASE_TRANSACTIONS SET STATUS = @status, STATUS_DESCRIPTION = @statusDescription WHERE LOGIN_ID = @login AND TRACK_ID = @trackId',

    selectProductDetails: `SELECT P.PRODUCT_ID, P.DESCRIPTION_EN AS PRODUCT_EN, P.DESCRIPTION_AR AS PRODUCT_AR, P.STATUS,
    PG.DESCRIPTION_EN AS PRODUCT_GROUP_EN, PG.DESCRIPTION_AR AS PRODUCT_GROUP_AR, PSG.DESCRIPTION_EN AS PRODUCT_SUB_GROUP_EN, 
    PSG.DESCRIPTION_AR AS PRODUCT_SUB_GROUP_AR FROM PRODUCTS AS P LEFT JOIN PRODUCT_GROUPS AS PG ON P.GROUP_ID = PG.GROUP_ID 
    LEFT JOIN PRODUCT_SUB_GROUPS AS PSG ON P.SUB_GROUP_ID = PSG.SUB_GROUP_ID ORDER BY P.PRODUCT_ID ASC;`,

    selectProductDetailsById: `SELECT P.PRODUCT_ID, P.DESCRIPTION_EN AS PRODUCT_EN, P.DESCRIPTION_AR AS PRODUCT_AR, P.STATUS,
    PG.GROUP_ID, PG.DESCRIPTION_EN AS PRODUCT_GROUP_EN, PG.DESCRIPTION_AR AS PRODUCT_GROUP_AR, PSG.SUB_GROUP_ID, PSG.DESCRIPTION_EN AS PRODUCT_SUB_GROUP_EN, 
    PSG.DESCRIPTION_AR AS PRODUCT_SUB_GROUP_AR, PSP.PERIOD_ID AS SUBSCRIPTION_PERIOD_ID, PSP.DESCRIPTION_EN AS SUBSCRIPTION_PERIOD_EN, PSP.DESCRIPTION_AR AS SUBSCRIPTION_PERIOD_AR,
	PF.FEE AS PRODUCT_FEE, PF.FEE_ID AS PRODUCT_FEE_ID FROM PRODUCTS AS P LEFT JOIN PRODUCT_GROUPS AS PG ON P.GROUP_ID = PG.GROUP_ID 
    LEFT JOIN PRODUCT_SUB_GROUPS AS PSG ON P.SUB_GROUP_ID = PSG.SUB_GROUP_ID LEFT JOIN PRODUCT_FEE AS PF ON P.PRODUCT_ID = PF.PRODUCT_ID 
	LEFT JOIN PRODUCT_SUBSCRIPTION_PERIODS AS PSP ON PF.PERIOD_ID = PSP.PERIOD_ID
	WHERE P.PRODUCT_ID = @productId`,

    addProduct:
        'INSERT INTO PRODUCTS (DESCRIPTION_EN, DESCRIPTION_AR, STATUS, GROUP_ID, SUB_GROUP_ID) VALUES (@descriptionEn, @descriptionAr, @status, @group, @subGroup) SELECT SCOPE_IDENTITY() as ID;',

    addProductFees:
        'INSERT INTO PRODUCT_FEE (PRODUCT_ID, PERIOD_ID, FEE) VALUES (@product, @period, @fee);',

    updateProduct:
        'UPDATE PRODUCTS SET DESCRIPTION_EN = @descriptionEn, DESCRIPTION_AR = @descriptionAr, STATUS = @status, GROUP_ID = @group, SUB_GROUP_ID = @subGroup WHERE PRODUCT_ID = @productId;',

    updateProductFees:
        'UPDATE PRODUCT_FEE SET PRODUCT_ID = @product, PERIOD_ID = @period, FEE = @fee WHERE FEE_ID = @feeId;',

    selectProductSubGroupDetails: `SELECT PSG.SUB_GROUP_ID, PSG.DESCRIPTION_EN AS PRODUCT_SUB_GROUP_EN, 
    PSG.DESCRIPTION_AR AS PRODUCT_SUB_GROUP_AR, PG.DESCRIPTION_EN AS PRODUCT_GROUP_EN, PG.DESCRIPTION_AR AS PRODUCT_GROUP_AR 
	FROM PRODUCT_SUB_GROUPS AS PSG LEFT JOIN PRODUCT_GROUPS AS PG ON PSG.GROUP_ID = PG.GROUP_ID ORDER BY PSG.SUB_GROUP_ID  ASC;`,

    selectSubGroupDetailsById: `SELECT PSG.SUB_GROUP_ID, PSG.DESCRIPTION_EN AS PRODUCT_SUB_GROUP_EN, PSG.DESCRIPTION_AR AS PRODUCT_SUB_GROUP_AR, 
    PG.GROUP_ID, PG.DESCRIPTION_EN AS PRODUCT_GROUP_EN, PG.DESCRIPTION_AR AS PRODUCT_GROUP_AR FROM PRODUCT_SUB_GROUPS AS PSG LEFT JOIN PRODUCT_GROUPS AS PG 
    ON PSG.GROUP_ID = PG.GROUP_ID WHERE PSG.SUB_GROUP_ID = @subGroupId ORDER BY PSG.SUB_GROUP_ID  ASC;`,

    addProductSubGroup:
        'INSERT INTO PRODUCT_SUB_GROUPS (DESCRIPTION_EN, DESCRIPTION_AR, GROUP_ID) VALUES (@descriptionEn, @descriptionAr, @group);',

    editProductSubGroup: `UPDATE PRODUCT_SUB_GROUPS SET DESCRIPTION_EN = @descriptionEn, DESCRIPTION_AR = @descriptionAr, GROUP_ID = @group WHERE SUB_GROUP_ID = @subGroupId;`,

    deleteProductSubGroup: `DELETE FROM PRODUCT_SUB_GROUPS WHERE SUB_GROUP_ID = @subGroupId;`,

    addProductGroup:
        'INSERT INTO PRODUCT_GROUPS (DESCRIPTION_EN, DESCRIPTION_AR) VALUES (@descriptionEn, @descriptionAr);',

    selectGroupDetailsById:
        'SELECT * FROM PRODUCT_GROUPS WHERE GROUP_ID = @groupId ORDER BY GROUP_ID ASC;',

    editProductGroup: `UPDATE PRODUCT_GROUPS SET DESCRIPTION_EN = @descriptionEn, DESCRIPTION_AR = @descriptionAr WHERE GROUP_ID = @groupId;`,
    deleteProductGroup: `DELETE FROM PRODUCT_GROUPS WHERE GROUP_ID = @groupId;`,

    // This query is used for filtering purposes as well.
    selectSubscriptions: `SELECT SUBSCRIPTION_ID, S01_USERS.S01_FIRSTNAME, PRODUCT_SUBSCRIPTIONS.PRODUCT_ID, PRODUCTS.DESCRIPTION_EN,
    PRODUCT_SUBSCRIPTION_PERIODS.DESCRIPTION_EN AS PERIOD_DESC, PRODUCT_SUBSCRIPTIONS.PERIOD_ID, PRODUCT_SUBSCRIPTIONS.STATUS, 
    SUBSCRIBED_DATE, EXPIRY_DATE, TRANSACTION_CODE, S02_USER_LOGINS.S02_LOGINNAME FROM PRODUCT_SUBSCRIPTIONS LEFT JOIN S02_USER_LOGINS
    ON PRODUCT_SUBSCRIPTIONS.USER_LOGIN_ID = S02_USER_LOGINS.S02_LOGIN_ID LEFT JOIN PRODUCT_SUBSCRIPTION_PERIODS ON 
    PRODUCT_SUBSCRIPTIONS.PERIOD_ID = PRODUCT_SUBSCRIPTION_PERIODS.PERIOD_ID LEFT JOIN PRODUCTS ON 
    PRODUCT_SUBSCRIPTIONS.PRODUCT_ID = PRODUCTS.PRODUCT_ID LEFT JOIN S01_USERS ON S02_USER_LOGINS.S02_USER_ID = S01_USERS.S01_ID
    ORDER BY SUBSCRIPTION_ID DESC;`,

    // This query is used for filtering purposes as well.
    selectPurchaseTransactions: `SELECT TRACK_ID, PAYMENT_ID, TRANSACTION_ID, REFERENCE_ID, LOGIN_ID, AMOUNT, CREATED_DATE, STATUS,
    ERROR, RESULT, S01_USERS.S01_FIRSTNAME, S02_USER_LOGINS.S02_LOGINNAME FROM PURCHASE_TRANSACTIONS LEFT JOIN S02_USER_LOGINS 
    ON PURCHASE_TRANSACTIONS.LOGIN_ID = S02_USER_LOGINS.S02_LOGIN_ID LEFT JOIN S01_USERS ON S02_USER_LOGINS.S02_USER_ID = S01_USERS.S01_ID
    ORDER BY CREATED_DATE DESC;`,

    selectSubscriptionPeriodDetailsById:
        'SELECT * FROM PRODUCT_SUBSCRIPTION_PERIODS WHERE PERIOD_ID = @subPeriodId ORDER BY PERIOD_ID ASC;',

    addSubscriptionPeriod:
        'INSERT INTO PRODUCT_SUBSCRIPTION_PERIODS (DESCRIPTION_EN, DESCRIPTION_AR) VALUES (@descriptionEn, @descriptionAr);',

    editSubscriptionPeriod: `UPDATE PRODUCT_SUBSCRIPTION_PERIODS SET DESCRIPTION_EN = @descriptionEn, DESCRIPTION_AR = @descriptionAr WHERE PERIOD_ID = @subPeriodId;`,
    deleteSubscriptionPeriod: `DELETE FROM PRODUCT_SUBSCRIPTION_PERIODS WHERE PERIOD_ID = @subPeriodId;`,
};

const storedProcedures = {
    addEmail: 'usp_Email_Add',
    addProduct: 'USP_ADD_PRODUCT',
    editProduct: 'USP_EDIT_PRODUCT',
    deleteProduct: 'USP_DELETE_PRODUCT',
};

module.exports = {
    dbQueries: dbQueries,
    storedProcedures: storedProcedures,
};
